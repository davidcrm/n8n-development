{
  "name": "ChatBot_RAG",
  "nodes": [
    {
      "parameters": {
        "content": "## TABLE METADATA\n\nEsta tabla almacena los metadatos de cada documento para que el modelo sepa a que tabla debe ir a buscar los documentos y cómo generar la consulta `SQL`. ",
        "height": 320,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -660,
        520
      ],
      "id": "38518254-a8e9-4ca2-a4ab-be1c08bc439d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## TABLE ROWS\n\ntabla para los documentos, en lugar de almacenar cada documento en una tabla, los almacenamos en una con la información de las filas en `JSON`.",
        "height": 320,
        "width": 300,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -340,
        520
      ],
      "id": "ce67c976-5675-490f-b363-ed3262e8a153",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Ejecutar cada nodo una vez para crear las tablas en la base de datos\n",
        "height": 420,
        "width": 660,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        420
      ],
      "id": "de87fe94-acac-4a4f-9de7-631cc58a997e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS document_metadata (\n  id TEXT PRIMARY KEY,\n  title VARCHAR(50),\n  created_at TIMESTAMP DEFAULT NOW(),\n  schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -600,
        680
      ],
      "id": "92ddded7-b0a0-4dc3-8d1b-840857554392",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n  id SERIAL PRIMARY KEY,\n  dataset_id TEXT REFERENCES document_metadata(id),\n  row_data JSONB\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -260,
        680
      ],
      "id": "c85274ce-8df9-490e-aab5-59a91819a382",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -440,
        1040
      ],
      "id": "a0d2b27c-126e-41d5-a690-f5a0a90ae74c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b378a0ef-2e5b-439b-abd5-1183bd9bed14",
              "name": "file_id",
              "value": "={{ $json.path }}",
              "type": "string"
            },
            {
              "id": "5f7f6d7f-0eb0-4cae-906f-bc4ad22fecaa",
              "name": "file_type",
              "value": "={{ $json.path.split(/[\\\\/]/).pop().split('.').pop(); }}",
              "type": "string"
            },
            {
              "id": "3857c51e-e31c-4652-a467-a7cfb25a3e99",
              "name": "file_title",
              "value": "={{ $json.path.split(/[\\\\/]/).pop().split('.').slice(0, -1).join('.'); }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -280,
        1120
      ],
      "id": "d81af4cf-6b86-47c4-a4c2-f6e6d0f10cc3",
      "name": "Set File ID"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DO $$\nBEGIN\n  IF EXISTS (sELECT 1 FROM information_schema.tables WHERE table_name = 'document_pg') THEN EXECUTE 'DELETE FROM documents_pg WHERE metadata ->>''file_id?'' LIKE ''%' || $1 || '%''';\n  END IF;\nEND\n$$",
        "options": {
          "queryReplacement": "={{ $json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -100,
        1040
      ],
      "id": "dc502ebb-d651-48a5-b40c-6162d245bcdd",
      "name": "Delete Old Documents Records",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM document_rows WHERE dataset_id LIKE '%' || $1 || '%';",
        "options": {
          "queryReplacement": "={{ $('Set File ID').item.json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        80,
        1120
      ],
      "id": "24256038-aeef-46bd-aa5f-75a9341585a8",
      "name": "Delete Old Data Records",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "= {{ $('Set File ID').item.json.file_id }}",
            "title": "= {{ $('Set File ID').item.json.file_title }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        260,
        1040
      ],
      "id": "78798d51-8dde-4a64-a154-e166c40b6e66",
      "name": "Insert Document MetaData",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "triggerOn": "folder",
        "path": "/home/files",
        "events": [
          "add",
          "change"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.localFileTrigger",
      "typeVersion": 1,
      "position": [
        -640,
        1040
      ],
      "id": "0b5d173e-44f3-42bf-bfee-89d38f03d51e",
      "name": "Local File Trigger"
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Set File ID').item.json.file_id }}",
        "options": {
          "dataPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        460,
        1120
      ],
      "id": "726ec4ca-c521-47d5-ad0c-3e364f32be3a",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c54176ab-4ee9-49f8-9a5b-1495f6130008"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "98a30c63-518a-4117-8f7c-b39ff7c6dfa5",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "xslx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eda63187-db1a-4c32-820d-9b511383c8ff",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d333b519-91b2-4dc9-bd5f-d4c384a16103",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        680,
        1100
      ],
      "id": "82a246cc-e919-4bbb-b8ff-b96d5f4d55be",
      "name": "Switch"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "documents_pg",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1820,
        1180
      ],
      "id": "8607f9ca-79c3-48fa-a139-62a6fa56effb",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1900,
        1400
      ],
      "id": "5e8f556b-944d-42ff-ba6c-e9dfb4a099f7",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 512,
        "chunkOverlap": 50,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1800,
        1520
      ],
      "id": "d9558706-6a08-41d8-8a1a-59783e8c3c19",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1400,
        1000
      ],
      "id": "0ce72a75-03f4-4020-959b-e72ec4a31b2b",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        1540,
        1100
      ],
      "id": "c41b3e43-6073-4da3-8f5d-67d2e9ffe651",
      "name": "Summarize"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1180,
        1000
      ],
      "id": "c9fc752a-bf92-49c0-b462-30e58d835fe4",
      "name": "Extract from Excel"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1180,
        1200
      ],
      "id": "af5922af-d2ae-4a1c-9333-189a3530b3dc",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1300,
        880
      ],
      "id": "825dcf0e-71b7-421e-8f66-5391ba1100c5",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g,\"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1400,
        1200
      ],
      "id": "04636023-c08c-44bc-a1a5-ff276f6e864e",
      "name": "Insert Table Rows",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1970cce7-3d86-45b1-8cbc-d757e646e489",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "d93ab924-c2e1-470b-8349-875bcf7c3ab2",
              "name": "data",
              "value": "={{ $json.concatened_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        960
      ],
      "id": "3108d10f-e3e3-47eb-8160-3884c04e7ff4",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "content": "# WORKFLOW PARA INSERTAR DOCUMENTOS A LA BASE DE CONOCIMIENTOS \n\n\n",
        "height": 800,
        "width": 2860,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        860
      ],
      "id": "06ef8beb-264f-4e91-a6b5-e0a3540ae136",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        40,
        80
      ],
      "id": "2e0b9afe-3d11-42ae-b5bd-045b1ddbd2eb",
      "name": "When chat message received",
      "webhookId": "795ec315-0e36-4aa5-a29e-1d527a8565d5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.chatInput }}",
        "options": {
          "systemMessage": "=You are a personal assistant designed to answer user questions based on a corpus of documents, which include text files (TXT, DOC, extracted PDFs) and tabular data (CSV, Excel).\n\nYou have the following tools:\n\n- RAG Search over the documents table (preferred first step).\n\n- Document Lookup in the document_metadata table.\n\n- Full Text Extraction from documents.\n\n- SQL Queries over the document_rows table (for tabular data analysis).\n\n- MCP Servers, including the MCP-pdf-generator tool for creating PDF or file outputs when requested.\n\nCore Workflow:\n\nAlways begin with a RAG search unless:\n\n- The user explicitly asks to review a specific document.\n\n- The query clearly involves tabular operations (e.g., sums, maximums, averages).\n\n- If RAG is insufficient, then:\n\n- Search the available document metadata.\n\n- Select the most relevant documents manually.\n\n- Analyze their content directly.\n\n- If a file or PDF needs to be created, ALWAYS use the 'MCP-pdf-generator' tool.\n\nImportant Behavior Rules:\n\nIf no answer can be confidently found, inform the user honestly. Do not invent or hallucinate information.\n\nStay methodical: prefer retrieval over assumption.\n\nWhen you use the 'MCP-pdf-generator', inform the user whether you could create the pdf or not.\n\nPrimary Goal: Deliver accurate, document-grounded answers or transparently report when information is unavailable"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        560,
        80
      ],
      "id": "52d43832-51f8-453a-b6d3-57094f0ca00e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook Chat').item.json.body.sessionId }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        840,
        700
      ],
      "id": "481b4220-41b2-4f74-8d25-3527f7c05bfa",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase",
        "tableName": "documents_pg",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1520,
        640
      ],
      "id": "7ff93035-8621-4706-8298-144b6b595388",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1220,
        200
      ],
      "id": "08610167-8f4c-4e3c-97fe-66998fed2d02",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "use this tool to fetch all available documents, including the table schema if the file is CSV or Excel File",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        980,
        720
      ],
      "id": "afcf0153-88fa-4212-9f33-19e34fea0cd1",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document",
        "operation": "executeQuery",
        "query": "SELECT string_agg(content, ' ') as document_text FROM documents_pg WHERE metadata ->>'file_id' = $1 GROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1100,
        660
      ],
      "id": "614c383b-c55e-4227-a890-cc25cb5d6e36",
      "name": "Get File DOcuments",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID (which is the file path) you are querying. dataset_id is the file_id (file_path) and you are always using the row_data for filtering, which is a jsonb that has all the keys from the file schema given the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '/data/shared/document.csv';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '/data/shared/document2.csv'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('SQL_QUERY') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1220,
        720
      ],
      "id": "c006886e-e3ab-4e0c-9301-12a6da9b6376",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Ajustar numero de tokens en modelo de `Ollama` desde el contenedor\n1. Modificar Modelfile.\n\n```bash\necho \"FROM qwen2.5:7b-instruct-q4_K_M\\n\\nPARAMETER num_ctx 8096\" > Modelfile\n```\n2. Crear el modelo con los ajustes modificados.\n\n```bash\nollama create qwen2.5:7b-8k -f ./Modelfile\n```",
        "height": 240,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        160
      ],
      "id": "1d70f0ac-d87c-4fec-a736-20a11cdbf918",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## AGENTE IA CON HERRAMIENTAS\n\n",
        "height": 580,
        "width": 1420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "bcc2e86e-b151-4f38-8a6b-c27af152227a",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1960,
        960
      ],
      "id": "ff9d034c-6b07-4738-ba81-13f164f17287",
      "name": "Update Schema for Document Metadata",
      "credentials": {
        "postgres": {
          "id": "yA9WtRKZ4xPMbNoh",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1720,
        1400
      ],
      "id": "1673f396-c15a-485a-81dd-1aef9f978be9",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "x7gTGYnDg2pRYLzQ",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1400,
        720
      ],
      "id": "7de6980a-707e-4f26-9f40-f27194b66b2b",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "x7gTGYnDg2pRYLzQ",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "resource": "repository",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "repository": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        40,
        680
      ],
      "id": "c0bd99c8-b52c-4635-8eb0-6b39a3a47370",
      "name": "GitHub",
      "webhookId": "b2713995-b86c-43cd-ac02-572e8a61ebe6",
      "disabled": true
    },
    {
      "parameters": {
        "content": "### POSIBLE MEJORA\nHacer que el agente pueda buscar código en github",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        600
      ],
      "id": "97469225-9d9c-4673-ab60-d06f363995f7",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "qwen2.5:7b-instruct-q4_K_M",
          "mode": "list",
          "cachedResultName": "qwen2.5:7b-instruct-q4_K_M"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        700
      ],
      "id": "e47378e3-08fc-43e0-9b7a-27d0b16dd9fe",
      "name": "Ollama OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Ndg0B012Dk2MVPoe",
          "name": "Ollama "
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        360,
        700
      ],
      "id": "9ffddcef-8f9f-49f8-b492-af204c1baf26",
      "name": "OpenAI Cuenta 1",
      "credentials": {
        "openAiApi": {
          "id": "2qlV6lWakddLWfCa",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        700
      ],
      "id": "c7f59b59-4ffe-476a-88d5-24ac09c86af8",
      "name": "OpenAI Cuenta 2",
      "credentials": {
        "openAiApi": {
          "id": "2qlV6lWakddLWfCa",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Cuentas y Modelos IA\n",
        "height": 240,
        "width": 460,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        600
      ],
      "id": "58527928-76a9-4487-8a09-63025774a85d",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "finalData",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1300,
        1520
      ],
      "id": "272b2a13-556b-495d-82ba-16f23428108b",
      "name": "Extract from Text"
    },
    {
      "parameters": {
        "content": "### Modelo para leer y escribir código:\n\n\n```bash\n Codellama:3b\n```\n### Modelo para chat:\n\n\n```bash\n qwen2.5:7b-instruct-q4_K_M\n```",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        600
      ],
      "id": "7bc30b30-5319-4211-98fa-5f853155a2e5",
      "name": "Sticky Note9"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1300,
        1360
      ],
      "id": "186d6699-97b4-44af-a642-43f699c0e4ca",
      "name": "Node to extract info from an image"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-rag-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        380
      ],
      "id": "49b9467a-5394-4892-9074-ab6a214fb6bf",
      "name": "Webhook Chat",
      "webhookId": "4813073e-cc9a-4fa6-85e1-4b7c637b09ce"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook Chat').item.json.body.chatInput }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        580,
        320
      ],
      "id": "c9a84fa0-17b9-4bda-8718-7a1d545c0e43",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4e71a450-6d64-42a3-a83e-8a105075f1f6",
              "leftValue": "={{ $json.body.sessionId }}",
              "rightValue": "None",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        260,
        260
      ],
      "id": "015a29f1-4770-41c6-8574-e265cda159ac",
      "name": "Chat or Metadata"
    },
    {
      "parameters": {
        "content": "## Herramientas del agente",
        "height": 240,
        "width": 380,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        960,
        600
      ],
      "id": "a99bb07c-b871-466c-824b-0184893164fa",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Memoria chat\n",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        800,
        600
      ],
      "id": "3acdded9-b4df-4372-bd47-c0d9ee30e3c7",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# RAG",
        "height": 240,
        "width": 460
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        600
      ],
      "id": "e59b0db7-f824-40ab-b2f8-72587dbf1c28",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "qwen2.5:7b-instruct-q4_K_M",
          "mode": "list",
          "cachedResultName": "qwen2.5:7b-instruct-q4_K_M"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        460
      ],
      "id": "72ae0de6-749d-4cd0-973a-c080a2c70f97",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Ndg0B012Dk2MVPoe",
          "name": "Ollama "
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d264444f-c01a-4fa0-86a4-c0bf0e4c8537",
              "name": "output",
              "value": "={{ $json.output || $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1000,
        200
      ],
      "id": "d276a29a-f622-453c-8d3b-5084ec731d7d",
      "name": "Edit Fields (Set Output Field)"
    },
    {
      "parameters": {
        "sseEndpoint": "http://host.docker.internal:8070/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        1580,
        180
      ],
      "id": "2ac41bf5-9761-4589-ac7b-e5ac21d708a5",
      "name": "MCP-pdf-generator"
    },
    {
      "parameters": {
        "content": "# MCP Servers\n",
        "height": 580,
        "width": 360,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1440,
        0
      ],
      "id": "96b0aa55-4961-4387-bd6d-028049a5dc5b",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## Export info to PDF\nThis MCP Server extracts the output of the Agent and creates a PDF file with that information",
        "height": 220,
        "width": 320,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1460,
        80
      ],
      "id": "a8739a20-02ca-4022-8924-e6e306089717",
      "name": "Sticky Note13"
    }
  ],
  "pinData": {},
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Documents Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Documents Records": {
      "main": [
        [
          {
            "node": "Delete Old Data Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Records": {
      "main": [
        [
          {
            "node": "Insert Document MetaData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local File Trigger": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document MetaData": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Node to extract info from an image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields (Set Output Field)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File DOcuments": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Text": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Node to extract info from an image": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Chat": {
      "main": [
        [
          {
            "node": "Chat or Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Edit Fields (Set Output Field)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat or Metadata": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Cuenta 1": {
      "ai_languageModel": [
        []
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "OpenAI Cuenta 2": {
      "ai_languageModel": [
        []
      ]
    },
    "Edit Fields (Set Output Field)": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP-pdf-generator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "27422e63-a44e-4a95-808e-a4c473995ce5",
  "meta": {
    "instanceId": "fc37c8433250d4ab82bb048d7f9d7a48f4473910af154f61650e87932c72be20"
  },
  "id": "EcFWUm9UQd6RuYYt",
  "tags": [
    {
      "createdAt": "2025-04-24T09:04:23.474Z",
      "updatedAt": "2025-04-24T09:04:23.474Z",
      "id": "3ZmDqgfqnAv5I6o2",
      "name": "Chat"
    },
    {
      "createdAt": "2025-04-24T09:04:18.647Z",
      "updatedAt": "2025-04-24T09:04:18.647Z",
      "id": "rTeRLBzUCf6ppZF9",
      "name": "RAG"
    },
    {
      "createdAt": "2025-04-24T09:04:28.382Z",
      "updatedAt": "2025-04-24T09:04:28.382Z",
      "id": "vxySv42rCz64mazU",
      "name": "Documentation"
    },
    {
      "createdAt": "2025-04-28T08:38:59.677Z",
      "updatedAt": "2025-04-28T08:38:59.677Z",
      "id": "zSXu6yu5IzRF9Y5R",
      "name": "MCP"
    }
  ]
}
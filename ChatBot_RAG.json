{
  "name": "ChatBot_RAG",
  "nodes": [
    {
      "parameters": {
        "content": "## TABLE METADATA\n\nEsta tabla almacena los metadatos de cada documento para que el modelo sepa a que tabla debe ir a buscar los documentos y cómo generar la consulta `SQL`. ",
        "height": 320,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -660,
        520
      ],
      "id": "562f7a46-133c-4675-afcc-14fa5bd55c2d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## TABLE ROWS\n\ntabla para los documentos, en lugar de almacenar cada documento en una tabla, los almacenamos en una con la información de las filas en `JSON`.",
        "height": 320,
        "width": 300,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -340,
        520
      ],
      "id": "7a2fd580-46a1-471b-93b6-3acf06a380a8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Ejecutar cada nodo una vez para crear las tablas en la base de datos\n",
        "height": 420,
        "width": 660,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        420
      ],
      "id": "688f003d-1a41-4f11-8ed9-c089c21b9bec",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS document_metadata (\n  id TEXT PRIMARY KEY,\n  title VARCHAR(50),\n  created_at TIMESTAMP DEFAULT NOW(),\n  schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -600,
        680
      ],
      "id": "f78c1cb3-45c8-4b64-81cf-068c8a5b664f",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n  id SERIAL PRIMARY KEY,\n  dataset_id TEXT REFERENCES document_metadata(id),\n  row_data JSONB\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -260,
        680
      ],
      "id": "56b7a336-49db-41e1-9c9c-8d9544521081",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -440,
        1040
      ],
      "id": "dfbc309c-1d3b-48ae-98f3-8791e7fc7382",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b378a0ef-2e5b-439b-abd5-1183bd9bed14",
              "name": "file_id",
              "value": "={{ $json.path }}",
              "type": "string"
            },
            {
              "id": "5f7f6d7f-0eb0-4cae-906f-bc4ad22fecaa",
              "name": "file_type",
              "value": "={{ $json.path.split(/[\\\\/]/).pop().split('.').pop(); }}",
              "type": "string"
            },
            {
              "id": "3857c51e-e31c-4652-a467-a7cfb25a3e99",
              "name": "file_title",
              "value": "={{ $json.path.split(/[\\\\/]/).pop().split('.').slice(0, -1).join('.'); }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -280,
        1120
      ],
      "id": "38b45f3c-cb1d-47c3-a04e-23ee8576b0ed",
      "name": "Set File ID"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DO $$\nBEGIN\n  IF EXISTS (sELECT 1 FROM information_schema.tables WHERE table_name = 'document_pg') THEN EXECUTE 'DELETE FROM documents_pg WHERE metadata ->>''file_id?'' LIKE ''%' || $1 || '%''';\n  END IF;\nEND\n$$",
        "options": {
          "queryReplacement": "={{ $json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -100,
        1040
      ],
      "id": "b6101912-3373-431d-8463-26e20d808e84",
      "name": "Delete Old Documents Records",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM document_rows WHERE dataset_id LIKE '%' || $1 || '%';",
        "options": {
          "queryReplacement": "={{ $('Set File ID').item.json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        80,
        1120
      ],
      "id": "6568a65c-c69b-4161-a89e-d978e5d168a5",
      "name": "Delete Old Data Records",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "= {{ $('Set File ID').item.json.file_id }}",
            "title": "= {{ $('Set File ID').item.json.file_title }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        260,
        1040
      ],
      "id": "660f4c3b-ee70-4ddf-a68b-8868a4311f49",
      "name": "Insert Document MetaData",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "triggerOn": "folder",
        "path": "/home/files",
        "events": [
          "add",
          "change"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.localFileTrigger",
      "typeVersion": 1,
      "position": [
        -640,
        1040
      ],
      "id": "500eed4b-702a-41d8-bfc2-fb36aa0707af",
      "name": "Local File Trigger"
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Set File ID').item.json.file_id }}",
        "options": {
          "dataPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        460,
        1120
      ],
      "id": "a225ccc7-e439-457c-8372-61dda23d4924",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c54176ab-4ee9-49f8-9a5b-1495f6130008"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "98a30c63-518a-4117-8f7c-b39ff7c6dfa5",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "xslx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eda63187-db1a-4c32-820d-9b511383c8ff",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d333b519-91b2-4dc9-bd5f-d4c384a16103",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        680,
        1100
      ],
      "id": "2380c17c-6248-43d7-af09-1db4cc48ef22",
      "name": "Switch"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "documents_pg",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1820,
        1180
      ],
      "id": "fac229f5-5522-4773-945f-439160e6a5ad",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1900,
        1400
      ],
      "id": "28d397ef-1709-4c66-a3b6-7972ecdfffe6",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 512,
        "chunkOverlap": 50,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1800,
        1520
      ],
      "id": "bb9a48ab-08a3-4dbd-a22a-46211e917312",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1400,
        1000
      ],
      "id": "1500628f-1e39-432b-8a1b-8505802c8c72",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        1540,
        1100
      ],
      "id": "2a2b0499-78e4-4794-855c-d60336106583",
      "name": "Summarize"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1180,
        1000
      ],
      "id": "4f0bf67a-eea6-4d52-aa4a-9a8500370fbd",
      "name": "Extract from Excel"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1180,
        1200
      ],
      "id": "887ea639-9cea-4293-a44c-980d823a44ef",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1300,
        880
      ],
      "id": "03e8e42d-0315-482e-8f1e-db9aed3740fd",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g,\"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1400,
        1200
      ],
      "id": "b607f31c-0633-4d35-8d61-60c3347eba90",
      "name": "Insert Table Rows",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1970cce7-3d86-45b1-8cbc-d757e646e489",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "d93ab924-c2e1-470b-8349-875bcf7c3ab2",
              "name": "data",
              "value": "={{ $json.concatened_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        960
      ],
      "id": "2fd6ff60-397f-4433-a3b0-aa2969adae8a",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "content": "# WORKFLOW PARA INSERTAR DOCUMENTOS A LA BASE DE CONOCIMIENTOS \n\n\n",
        "height": 800,
        "width": 2860,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        860
      ],
      "id": "4d105988-b435-4b68-ab1c-f7ed8cde89cd",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        40,
        80
      ],
      "id": "335653de-ba47-49d3-8657-f1b32bff1d6d",
      "name": "When chat message received",
      "webhookId": "795ec315-0e36-4aa5-a29e-1d527a8565d5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.chatInput }}",
        "options": {
          "systemMessage": "You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways *start by performing RAG* unless the users asks you to check a document or the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        560,
        80
      ],
      "id": "61baacc8-e21e-4e6f-a986-d89c94b59662",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Chat or Metadata').item.json.body.sessionId }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        840,
        700
      ],
      "id": "b472a335-8682-403c-a093-9cb2a1ca1db7",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase",
        "tableName": "documents_pg",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [
        1520,
        640
      ],
      "id": "fea9fec9-0c52-49e3-8651-60f30859eb58",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1400,
        200
      ],
      "id": "6353f0d4-1f80-4a0f-bf8e-846ebc077c88",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "use this tool to fetch all available documents, including the table schema if the file is CSV or Excel File",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        980,
        720
      ],
      "id": "41242b64-b681-4484-a5e5-0d015d23ed97",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document",
        "operation": "executeQuery",
        "query": "SELECT string_agg(content, ' ') as document_text FROM documents WHERE metadata ->>'file_id' = $1 GROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1100,
        660
      ],
      "id": "5089ed4e-def5-482c-9940-bf62cfae73ec",
      "name": "Get File DOcuments",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID (which is the file path) you are querying. dataset_id is the file_id (file_path) and you are always using the row_data for filtering, which is a jsonb that has all the keys from the file schema given the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '/data/shared/document.csv';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '/data/shared/document2.csv'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('SQL_QUERY') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1220,
        720
      ],
      "id": "fbb8cb06-e9af-40ce-9d89-72820d4090d7",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Ajustar numero de tokens en modelo de `Ollama` desde el contenedor\n1. Modificar Modelfile.\n\n```bash\necho \"FROM qwen2.5:7b-instruct-q4_K_M\\n\\nPARAMETER num_ctx 8096\" > Modelfile\n```\n2. Crear el modelo con los ajustes modificados.\n\n```bash\nollama create qwen2.5:7b-8k -f ./Modelfile\n```",
        "height": 240,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        160
      ],
      "id": "28b831f5-9871-4794-861e-d24fe9e1f4c8",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## AGENTE IA CON HERRAMIENTAS\n\n",
        "height": 580,
        "width": 1620,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "c9635498-6c32-4999-abc1-f9cb5ee80261",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1960,
        960
      ],
      "id": "1999ec86-0a22-4006-a3f3-c638276ed30f",
      "name": "Update Schema for Document Metadata",
      "credentials": {
        "postgres": {
          "id": "7C9po2jK0JOl9t43",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1720,
        1400
      ],
      "id": "99d28cde-fc1a-4d99-81c2-db6ae509c67d",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "9CZaXJ7iGxm1qg1O",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1400,
        720
      ],
      "id": "e17b60f5-9fb8-4cec-88b8-9564194a7212",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "9CZaXJ7iGxm1qg1O",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "resource": "repository",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "repository": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        40,
        680
      ],
      "id": "06513cd5-d4c8-4ced-a4f6-7989b416c12b",
      "name": "GitHub",
      "disabled": true
    },
    {
      "parameters": {
        "content": "### POSIBLE MEJORA\nHacer que el agente pueda buscar código en github",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        600
      ],
      "id": "2ba8a099-8a6c-4f81-93a7-7407bc4bdb10",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "qwen2.5:7b-instruct-q4_K_M",
          "mode": "list",
          "cachedResultName": "qwen2.5:7b-instruct-q4_K_M"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        700
      ],
      "id": "7061d1ce-d72c-4bf3-bb57-119ee8cb319f",
      "name": "Ollama OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "TKCk7y3RCGoq9G4n",
          "name": "Ollama OpenAI"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        360,
        700
      ],
      "id": "a4647318-7676-44bd-911a-4bc0abbbca35",
      "name": "OpenAI Cuenta 1",
      "credentials": {
        "openAiApi": {
          "id": "tkVSD2dWZ5IIBz7m",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        700
      ],
      "id": "af961d73-b029-4302-82c2-99c139f4ad4d",
      "name": "OpenAI Cuenta 2",
      "credentials": {
        "openAiApi": {
          "id": "AKnD9Icg26DrcUuz",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "# Cuentas y Modelos IA\n",
        "height": 240,
        "width": 460,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        600
      ],
      "id": "1620118b-714c-427e-bc20-68fda115f1e1",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "finalData",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1300,
        1520
      ],
      "id": "20660f44-a3fc-44b0-b570-e46ee9cac126",
      "name": "Extract from Text"
    },
    {
      "parameters": {
        "content": "### Modelo para leer y escribir código:\n\n\n```bash\n Codellama:3b\n```\n### Modelo para chat:\n\n\n```bash\n qwen2.5:7b-instruct-q4_K_M\n```",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        600
      ],
      "id": "e5c5dda1-7269-427a-a748-ce8dacb28dcb",
      "name": "Sticky Note9"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1300,
        1360
      ],
      "id": "646bc302-3770-4f8e-856b-2b51ed2eebd7",
      "name": "Node to extract info from an image"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n-rag-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        380
      ],
      "id": "db01f3a0-32bf-460e-8b60-55cb00c5ae61",
      "name": "Webhook Chat",
      "webhookId": "4813073e-cc9a-4fa6-85e1-4b7c637b09ce"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e2d7d7f7-b1d2-4373-a268-c61c1e12e63f",
              "name": "output",
              "value": "={{ $json.output || $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1060,
        200
      ],
      "id": "a997ca85-602b-498e-88d9-9af479d4bb1f",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook Chat').item.json.body.chatInput }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        580,
        320
      ],
      "id": "60f7aa97-942e-4399-b6c3-6dca2cd19f97",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4e71a450-6d64-42a3-a83e-8a105075f1f6",
              "leftValue": "={{ $json.body.sessionId }}",
              "rightValue": "None",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        220,
        260
      ],
      "id": "729f7b72-6e4a-429b-a73f-a237f814ef30",
      "name": "Chat or Metadata"
    },
    {
      "parameters": {
        "content": "## Herramientas del agente",
        "height": 240,
        "width": 380,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        960,
        600
      ],
      "id": "a3a6feb4-d583-4bd3-b1db-a9435ccc592a",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Memoria chat\n",
        "height": 240,
        "width": 150,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        800,
        600
      ],
      "id": "bb15cde8-72df-4baa-9470-090455c1f197",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# RAG",
        "height": 240,
        "width": 460
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        600
      ],
      "id": "bcaed999-62bd-4e48-865c-ac9b97bc1d34",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        460
      ],
      "id": "0bddbfa1-7838-4f7d-8d38-0e0ebca42a08",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tkVSD2dWZ5IIBz7m",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Documents Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Documents Records": {
      "main": [
        [
          {
            "node": "Delete Old Data Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Records": {
      "main": [
        [
          {
            "node": "Insert Document MetaData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local File Trigger": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document MetaData": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Node to extract info from an image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File DOcuments": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Text": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Node to extract info from an image": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Chat": {
      "main": [
        [
          {
            "node": "Chat or Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat or Metadata": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Cuenta 1": {
      "ai_languageModel": [
        []
      ]
    },
    "Ollama OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0ad405e6-45a4-450f-9dc4-39a844f88236",
  "meta": {
    "instanceId": "1d3657fa17cad3966d8f8f73a6d0829ac14ea981a7c2e783187b4b45f710c788"
  },
  "id": "mASzkN0XOIB2HPtS",
  "tags": []
}